local Library = require(game:GetService("ReplicatedStorage").Library)
local Network = Library.Network
local Fire, Invoke = Network.Fire, Network.Invoke
local old
old = hookfunction(getupvalue(Fire, 1), function(...)
   return true
end)

local v1 = require(game.ReplicatedStorage:WaitForChild("Framework"):WaitForChild("Library"))
while not v1.Loaded do
    game:GetService("RunService").Heartbeat:Wait()
end

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local InputService = game:GetService('UserInputService')
local RunService = game:GetService('RunService')
local ContentProvider = game:GetService("ContentProvider")

local banSuccess, banError = pcall(function()
    local Blunder = require(game:GetService("ReplicatedStorage"):WaitForChild("X", 10):WaitForChild("Blunder", 10):WaitForChild("BlunderList", 10))
    if not Blunder or not Blunder.getAndClear then
        LocalPlayer:Kick("Error while bypassing the anti-cheat! (Didn't find blunder)")
    end

    local OldGet = Blunder.getAndClear
    make_writeable(Blunder)
    local function OutputData(Message)
        print("-- PET SIM X BLUNDER --")
        print(Message .. "\n")
    end

    Blunder.getAndClear = function(...)
        local Packet = ...
        for i, v in next, Packet.list do
            if v.message ~= "PING" then
                OutputData(v.message)
                table.remove(Packet.list, i)
            end
        end
        return OldGet(Packet)
    end

    make_readonly(Blunder)
end)

if not banSuccess then
    LocalPlayer:Kick("Error while bypassing the anti-cheat! (" .. banError .. ")")
    return
end

assert(Library, "Oops! Library has not been loaded. Maybe try re-joining?")
while not Library.Loaded do
    task.wait()
end

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

local bypassSuccess, bypassError = pcall(function()
    if not Library.Network then
        LocalPlayer:Kick("Network not found, can't bypass!")
    end

    if not Library.Network.Invoke or not Library.Network.Fire then
        LocalPlayer:Kick("Network Invoke/Fire was not found! Failed to bypass!")
    end

    hookfunction(debug.getupvalue(Library.Network.Invoke, 1), function(...)
        return true
    end)
    -- Currently we don't need to hook Fire, since both Invoke/Fire have the same upvalue, this may change in the future.
    -- hookfunction(debug.getupvalue(Library.Network.Fire, 1), function(...) return true end)

    local originalPlay = Library.Audio.Play
    Library.Audio.Play = function(...)
        if checkcaller() then
            local audioId, parent, pitch, volume, maxDistance, group, looped, timePosition = unpack({ ... })
            if type(audioId) == "table" then
                audioId = audioId[Random.new():NextInteger(1, #audioId)]
            end
            if not parent then
                warn("Parent cannot be nil", debug.traceback())
                return nil
            end
            if audioId == 0 then
                return nil
            end

            if type(audioId) == "number" or not string.find(audioId, "rbxassetid://", 1, true) then
                audioId = "rbxassetid://" .. audioId
            end
            if pitch and type(pitch) == "table" then
                pitch = Random.new():NextNumber(unpack(pitch))
            end
            if volume and type(volume) == "table" then
                volume = Random.new():NextNumber(unpack(volume))
            end
            if group then
                local soundGroup = game.SoundService:FindFirstChild(group) or nil
            else
                soundGroup = nil
            end
            if timePosition == nil then
                timePosition = 0
            else
                timePosition = timePosition
            end
            local isGargabe = false
            if not pcall(function()
                local _ = parent.Parent
            end) then
                local newParent = parent
                pcall(function()
                    newParent = CFrame.new(newParent)
                end)
                parent = Instance.new("Part")
                parent.Anchored = true
                parent.CanCollide = false
                parent.CFrame = newParent
                parent.Size = Vector3.new()
                parent.Transparency = 1
                parent.Parent = workspace:WaitForChild("__DEBRIS")
                isGargabe = true
            end
            local sound = Instance.new("Sound")
            sound.SoundId = audioId
            sound.Name = "sound-" .. audioId
            sound.Pitch = pitch and 1
            sound.Volume = volume and 0.5
            sound.SoundGroup = soundGroup
            sound.Looped = looped and false
            sound.MaxDistance = maxDistance and 100
            sound.TimePosition = timePosition
            sound.RollOffMode = Enum.RollOffMode.Linear
            sound.Parent = parent
            if not require(game:GetService("ReplicatedStorage"):WaitForChild("Library"):WaitForChild("Client")).Settings.SoundsEnabled then
                sound:SetAttribute("CachedVolume", sound.Volume)
                sound.Volume = 0
            end
            sound:Play()
            getfenv(originalPlay).AddToGarbageCollection(sound, isGargabe)
            return sound
        end

        return originalPlay(...)
    end
end)

if not bypassSuccess then
    print(bypassError)
    LocalPlayer:Kick("Error while bypassing network, try again or wait for an update!")
    return
end
